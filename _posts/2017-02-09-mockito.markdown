---
layout:     post
title:      "Mockito를 이용한 MockTest"
subtitle:   "JUnit"
date:       2017-02-09 08:00:00
author:     "Juntaek Lee"
header-img: "img/post-bg-06.jpg"
---

# 테스트 코드를 작성하며...
 NHN 엔터에 입사 전 과제에서 JUnit 테스트 코드를 작성하라는 요구사항이 있었다. 입사 후 베이스캠프 프로젝트를 진행할 때도 테스트 코드의 중요성을 몇번씩 들었다. 그때는 테스트 코드의 필요하다고 생각은 했지만 진정한 필요성에 대해서는 느끼지 못했다. 프로젝트에서 테스트 코드를 작성해보고 TDD 강의를 듣고나서야 테스트 코드의 필요성을 제대로 알게 되었다.
 
 베이스캠프 진행 시 나는 프로그램이 돌아가게끔 하는데 초점이 맞춰져 있었다. 테스트 코드를 작성해야한다는 의무감 때문에 상당히 단순한 테스트 케이스만을 처리하는 테스트 코드를 작성하였다. 그렇게 모든 프로젝트가 끝나고 우리 TF에는 2가지 문제가 발생하였다.
 1. 원하는 요구사항대로 로직이 수행하지 않는 함수
 2. A 기능을 수정하였더니 B 기능이 작동하지 않음
 
만약 우리가 제대로 된 단위테스트를 진행했더라면 1번 문제는 테스트 코드를 돌려봄으로써 쉽게 발견할 수 있을 것이다. 2번 문제는 통합테스트를 제대로 작성했더라면 A 기능을 수정하는 개발자가 B기능이 작동하지 않는 이유를 알 수 있었을 것이다. 
 
현재 우리 팀이 진행하고 있는 프로젝트는 4명이서 진행하며 기능이 그렇게 많지 않은 작은 프로젝트이다. 수십명이 함께 진행하는 프로젝트에 테스트 코드가 단 한줄이라도 없다면 어떻게 될까? 아마도 정체를 알 수 없는 각종 버그들과 함께 주말 출근을 하고 있는 나를 볼 수 있을 것 같다.
베이스캠프를 진행하며 테스트 코드 작성의 필요성을 알았으니 이제 양질의 테스트 코드를 작성하기 위해 공부를 해야겠다!
 
# Mockito를 이용한 테스트
테스트 코드를 작성하다 보면 외부 클래스의 의존성 때문에 정작 내 코드의 로직을 테스트 하지 못하는 경우가 생긴다. 이럴 때 Mockito 라이브러리를 사용하면 쉽게 테스트 코드를 작성할 수 있다.
 
#### Mock 객체 생성
---

![](http://ljt629.github.io/img/blog-mock.PNG)

(출처 : http://javacan.tistory.com/entry/MocktestUsingMockito)

위와 같이 @Mock 어노테이션 혹은 mock()함수를 이용해 Article 객체를 가짜 객체로 만들어서 마치 진짜 Article 객체인 마냥 다룰 수 있게 된다. Mock 객체로 생성하게 되면 다양한 기능들을 테스트에 사용할 수 있다.
 
#### Mockito.verify()
---

![](http://ljt629.github.io/img/blog-verify.PNG)

(출처 : http://javacan.tistory.com/entry/MocktestUsingMockito)

* verify(mockedObject).testMethod();
Mock 객체로 생성된 mockedObject가 testMethod()를 호출하였는지 여부를 확인한다. 이를 통해 코드 내에서 특정 함수가 호출 되었는지 여부를 테스트 코드로 작성할 수 있다.
* verify(mockedObject, times(3)).testMethod();
testMethod()가 3번 호출 되었는지 검증한다.
* verify(mockedObject, never()).testMethod();
testMethod()가 호출되지 않았는지 검증한다.
* verify(mockedObject, atLeastOnce()).testMethod();
testMethod()가 최소한 한번은 호출되었는지 검증한다.
* verify(mockedObject, atLeast(2)).testMethod();
testMethod()가 최소 2번은 호출되었는지 검증한다.
* verify(mockedObject, atMost(3)).testMethod();
testMethod()가 최대 3번 호출되었는지 검증한다.
 
#### Stub
---

![](http://ljt629.github.io/img/blog-stub.PNG)

(출처 : http://javacan.tistory.com/entry/MocktestUsingMockito)

Mock 객체는 가짜로 생성된 객체기 때문에  writeArticleService.writeAritcle(article)의 리턴값이 null이 나오게 된다. 따라서 NullPointException이 발생하게 된다. 내가 원하는 것은 외부 의존성(writeArticleService)를 제거하고 테스트하는 것인데 이러면 테스트가 불가능해진다. 이를 해결하기 위해 Mokito에서 Mock 객체의 함수를 호출 시 원하는 값을 리턴할 수 있게 해준다. 이것이 바로 Stub이라는 기능이다. Stub은 아래와 같이 when - then 형식으로 사용할 수 있다.
* when(mockedObject.testMethod()).thenReturn(1)
mockedObject.testMethod() 호출 시 무조건 1을 리턴한다.
 
* when(mockedObject.testMethod(anyObject()).thenReturn(1)
testMethod에 인자가 있을 경우 Argument Matcher를 이용하여 인자를 매칭할 수 있다.
Argument Matcher에는 anyListOf, anyInt, anyString... 등을 사용할 수 있다. 각 상황에 테스트 상황에 맞는 Matcher 사용하여 Stub을 만들면 될 것 같다.
 
* when(mockedObject.testMethod()).thenThrow(new CommonException("Value Required")
testMethod()가 실행 중에 예외를 발생시키고 싶을 때가 있다. 이때 thenThrow를 원하는 Exception을 발생시킬 수 있다.